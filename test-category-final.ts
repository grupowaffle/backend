import { getDrizzleClient } from './src/config/db';
import { CategoryRepository } from './src/repositories/CategoryRepository';
import { NewCategory } from './src/config/db/schema';
import { sql } from 'drizzle-orm';

async function testCategoryFinal() {
  console.log('üß™ Teste final das solu√ß√µes implementadas para categorias...\n');

  const env = {
    DATABASE_URL: process.env.NEON_URL || process.env.DATABASE_URL,
  };

  try {
    const db = getDrizzleClient(env);
    const categoryRepo = new CategoryRepository(db);

    // 1. Criar duas categorias de teste
    console.log('‚ûï 1. Criando categorias de teste:');

    const categoryWithArticles: NewCategory = {
      name: 'Categoria com Artigos',
      slug: 'categoria-com-artigos-' + Date.now(),
      description: 'Esta categoria ter√° artigos',
      isActive: true,
    };

    const categoryWithoutArticles: NewCategory = {
      name: 'Categoria sem Artigos',
      slug: 'categoria-sem-artigos-' + Date.now(),
      description: 'Esta categoria n√£o ter√° artigos',
      isActive: true,
    };

    const createdWithArticles = await categoryRepo.create(categoryWithArticles);
    const createdWithoutArticles = await categoryRepo.create(categoryWithoutArticles);

    console.log(`   ‚úÖ Criada: ${createdWithArticles.name} (ID: ${createdWithArticles.id})`);
    console.log(`   ‚úÖ Criada: ${createdWithoutArticles.name} (ID: ${createdWithoutArticles.id})`);

    // 2. Simular um artigo sendo criado na primeira categoria
    console.log('\nüìù 2. Simulando cria√ß√£o de artigo na primeira categoria:');
    await db.execute(sql`
      INSERT INTO articles (id, title, slug, "categoryId", "createdAt", "updatedAt")
      VALUES (
        'test-article-' || extract(epoch from now()),
        'Artigo de Teste',
        'artigo-teste-' || extract(epoch from now()),
        ${createdWithArticles.id},
        now(),
        now()
      )
    `);
    console.log('   ‚úÖ Artigo de teste criado');

    // 3. Verificar depend√™ncias das categorias
    console.log('\nüîç 3. Verificando depend√™ncias:');
    const depsWithArticles = await categoryRepo.checkDependencies(createdWithArticles.id);
    const depsWithoutArticles = await categoryRepo.checkDependencies(createdWithoutArticles.id);

    console.log(`   "${createdWithArticles.name}": ${depsWithArticles.articles} artigos`);
    console.log(`   "${createdWithoutArticles.name}": ${depsWithoutArticles.articles} artigos`);

    // 4. Testar exclus√£o sem force (deve falhar)
    console.log('\n‚ùå 4. Tentando excluir categoria com artigos SEM force:');
    try {
      await categoryRepo.delete(createdWithArticles.id);
      console.log(`   ‚ö†Ô∏è  ERRO: Categoria foi deletada quando n√£o deveria!`);
    } catch (error) {
      console.log(`   ‚úÖ Erro esperado: ${error instanceof Error ? error.message : error}`);
    }

    // 5. Testar exclus√£o de categoria sem artigos (deve funcionar)
    console.log('\n‚úÖ 5. Tentando excluir categoria SEM artigos:');
    try {
      const deleted = await categoryRepo.delete(createdWithoutArticles.id);
      if (deleted) {
        console.log(`   ‚úÖ Categoria sem artigos deletada com sucesso`);
      } else {
        console.log(`   ‚ùå Falha ao deletar categoria sem artigos`);
      }
    } catch (error) {
      console.log(`   ‚ùå Erro inesperado: ${error instanceof Error ? error.message : error}`);
    }

    // 6. Criar nova categoria para movimenta√ß√£o
    console.log('\n‚ûï 6. Criando categoria de destino para movimenta√ß√£o:');
    const targetCategory: NewCategory = {
      name: 'Categoria Destino',
      slug: 'categoria-destino-' + Date.now(),
      description: 'Para onde os artigos ser√£o movidos',
      isActive: true,
    };
    const createdTarget = await categoryRepo.create(targetCategory);
    console.log(`   ‚úÖ Criada: ${createdTarget.name} (ID: ${createdTarget.id})`);

    // 7. Testar movimenta√ß√£o de artigos
    console.log('\nüîÑ 7. Testando movimenta√ß√£o de artigos:');
    console.log(`   De: "${createdWithArticles.name}" para "${createdTarget.name}"`);

    try {
      const deleted = await categoryRepo.delete(createdWithArticles.id, {
        moveArticlesTo: createdTarget.id
      });

      if (deleted) {
        console.log(`   ‚úÖ Categoria deletada e artigos movidos com sucesso`);

        // Verificar se os artigos foram movidos
        const finalDeps = await categoryRepo.checkDependencies(createdTarget.id);
        console.log(`   üìä Artigos na categoria destino: ${finalDeps.articles}`);
      } else {
        console.log(`   ‚ùå Falha ao deletar categoria com movimenta√ß√£o`);
      }
    } catch (error) {
      console.log(`   ‚ùå Erro durante movimenta√ß√£o: ${error instanceof Error ? error.message : error}`);
    }

    // 8. Limpeza final
    console.log('\nüßπ 8. Limpeza final:');
    try {
      await categoryRepo.delete(createdTarget.id, { force: true });
      console.log(`   ‚úÖ Categoria destino deletada com force`);
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Erro na limpeza: ${error instanceof Error ? error.message : error}`);
    }

    console.log('\nüéâ Teste final conclu√≠do com sucesso!');
    console.log('\nüìã RESUMO DAS SOLU√á√ïES IMPLEMENTADAS:');
    console.log('   ‚úÖ Verifica√ß√£o de depend√™ncias antes da exclus√£o');
    console.log('   ‚úÖ Movimenta√ß√£o de artigos para outra categoria');
    console.log('   ‚úÖ Exclus√£o for√ßada quando necess√°rio');
    console.log('   ‚úÖ Tratamento de erros espec√≠ficos com c√≥digos');
    console.log('   ‚úÖ Aplica√ß√£o dos princ√≠pios SOLID');

  } catch (error) {
    console.error('‚ùå Erro durante teste final:', error);
    process.exit(1);
  }
}

testCategoryFinal().catch(console.error);